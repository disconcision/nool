import { Exp, atom, comp, flat } from "../syntax/Exp";
import * as Symbols from "../data/Symbols";

// ‚òÅÔ∏è üß© ü¶∑ ü¶†  üå∏ üçÑ üé≤ üêù
// ‚ûï ‚ûñ ‚úñÔ∏è ‚ûó üü∞ üåï üåò üåë 0Ô∏è‚É£ 1Ô∏è‚É£ ‚ùì

const B = flat(Symbols.digit);

export const alg: Exp = comp([
  atom("‚ûï"),
  comp([
    atom("‚ûï"),
    comp([atom("‚ûï"), atom("‚òÅÔ∏è"), comp([atom("‚ûñ"), atom("üçÑ")])]),
    atom("üçÑ"),
  ]),
  comp([
    atom("‚ûï"),
    comp([atom("‚úñÔ∏è"), atom("üé≤"), atom("ü¶†")]),
    comp([atom("‚úñÔ∏è"), atom("üé≤"), atom("üêù")]),
  ]),
]);

const lab: Exp = comp([atom("‚ûï"), atom("‚ùì"), atom("‚ùì")]);

const moons: Exp = comp([
  atom("‚ûï"),
  comp([atom("‚ûï"), B(["üåò", "üåò", "üåë", "üåë", "üåò"]), B(["üåò", "üåë", "üåò"])]),
  comp([
    atom("‚ûï"),
    comp([atom("‚ûï"), atom("üåò"), atom("üåò")]),
    comp([atom("‚ûï"), atom("üåò"), comp([atom("‚ûï"), atom("üåò"), atom("üåò")])]),
  ]),
]);

const let_exp = (pat: Exp, def: Exp, body: Exp): Exp =>
  comp([atom("let"), pat, atom("="), def, atom("in"), body]);

const fun_exp = (pat: Exp, body: Exp): Exp =>
  comp([atom("fun"), pat, atom("->"), body]);

const var_exp = (name: string): Exp => atom(name);

const app_exp = (fun: Exp, arg: Exp): Exp =>
  comp([fun, atom("("), arg, atom(")")]);

const if_exp = (cond: Exp, then: Exp, els: Exp): Exp =>
  comp([atom("if"), cond, atom("then"), then, atom("else"), els]);

const code: Exp = let_exp(
  var_exp("x"),
  atom("1Ô∏è"),
  app_exp(var_exp("f"), var_exp("x"))
);

// ‚ñ® ‰∑Ä ‰∑Ç ·ñõ ·ôä ‡¢• ·é£ ‚óµ
export const init: Exp = comp([
  atom("‰∑∂"),
  comp([atom("·ñõ"), alg]),
  comp([atom("·ôä"), moons]),
  comp([atom("‚óµ"), code]),
  comp([atom("·ùè"), lab]),
]);
